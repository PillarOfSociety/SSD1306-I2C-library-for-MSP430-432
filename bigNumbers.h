/*
 * bigNumbers.h
 *
 *  Created on: Apr 2, 2020
 *      Author: AJS
 *
 *      prints a 15x24 number... These numbers are actually 20x13 but padded on right left and top
 *      The biggest I could make and still allow 6x8 text above them.
 */

#ifndef BIGNUMBERS_H_
#define BIGNUMBERS_H_

const unsigned char bigNumbers[10][45] =
{
 {  //zero
 0x00, 0x00, 0x80, 0xE0, 0xE0, 0xF0, 0x70, 0x70, 0x70, 0xF0, 0xE0, 0xE0, 0x80, 0x00, 0x00, 0x00,
 0xFE, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x07,
 0x1F, 0x7F, 0x7F, 0xF8, 0xE0, 0xE0, 0xE0, 0xF8, 0x7F, 0x7F, 0x1F, 0x07, 0x00,  //45
 },
 {  //one
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x1E, 0x0F, 0x0F, 0x07, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
 },
 {  //2_15x24_arial
 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0x70, 0x70, 0x70, 0xF0, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00,
 0x03, 0x03, 0x03, 0x03, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xFF, 0x7F, 0x3F, 0x0F, 0x00, 0x00, 0xC0,
 0xF0, 0xFC, 0xFE, 0xFF, 0xEF, 0xE7, 0xE3, 0xE1, 0xE0, 0xE0, 0xE0, 0xE0, 0x00,
 },
 {  //three
 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0x70, 0x70, 0xF0, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00,
 0x01, 0x01, 0x01, 0x01, 0x00, 0x38, 0x38, 0x3C, 0x7F, 0xEF, 0xEF, 0xC3, 0x80, 0x00, 0x00, 0x0C,
 0x3C, 0x7C, 0x7C, 0xF0, 0xE0, 0xE0, 0xE0, 0xF0, 0x7F, 0x7F, 0x3F, 0x0F, 0x00,
 },
 {//four
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x80, 0xE0, 0xF0, 0x7C, 0x1E, 0x0F, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
 0x00, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E, 0x0E, 0x00
 },
 {  //five
 0x00, 0x00, 0xC0, 0xF0, 0xF0, 0xF0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00,
 0x38, 0x3F, 0x3F, 0x3F, 0x18, 0x1C, 0x1C, 0x1C, 0x3C, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x18,
 0x38, 0x78, 0xF8, 0xF0, 0xE0, 0xE0, 0xE0, 0xF0, 0x7F, 0x7F, 0x1F, 0x0F, 0x00,
 },
 {  //six
 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0x70, 0x70, 0x70, 0xF0, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00,
 0xFC, 0xFF, 0xFF, 0xFF, 0x71, 0x38, 0x38, 0x38, 0x78, 0xF9, 0xF1, 0xE1, 0x81, 0x00, 0x00, 0x07,
 0x1F, 0x3F, 0x7F, 0xF0, 0xE0, 0xE0, 0xE0, 0xF0, 0x7F, 0x7F, 0x3F, 0x0F, 0x00,
 },
 {  //7
 0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFC, 0xFF, 0x3F, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 },
 { //8
 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0x70, 0x70, 0x70, 0xF0, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00,
 0x07, 0x8F, 0xDF, 0xFF, 0xF8, 0x70, 0x70, 0x70, 0xF8, 0xFF, 0xDF, 0x8F, 0x07, 0x00, 0x00, 0x1F,
 0x3F, 0x7F, 0x7F, 0xF0, 0xE0, 0xE0, 0xE0, 0xF0, 0x7F, 0x7F, 0x3F, 0x1F, 0x00,
 },
 { //nine
 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0x70, 0x70, 0x70, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00,
 0x1F, 0x7F, 0xFF, 0xFF, 0xE0, 0xC0, 0xC0, 0xC0, 0xE0, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x18,
 0x78, 0x78, 0xF9, 0xF1, 0xE1, 0xE1, 0xE1, 0x78, 0x7F, 0x3F, 0x1F, 0x03, 0x00,
 }
};

const unsigned char period[] = {  //period_6x24_arial
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0,
0xF0, 0x00,
};

const unsigned char space[] = {  //blank space
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //45
};

#endif /*15X24NUMBERS_H_ */
